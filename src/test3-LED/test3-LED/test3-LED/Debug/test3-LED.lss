
test3-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000746  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030e  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:
    startConversion();
}

void startConversion()
{
    ADCSRA |= (1 << ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <setupADC>:
    }
}

void setupADC()
{
    ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX1);
  9c:	83 e4       	ldi	r24, 0x43	; 67
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  a2:	8f e8       	ldi	r24, 0x8F	; 143
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    DIDR0 = (1 << ADC3D);
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
    startConversion();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
  b2:	08 95       	ret

000000b4 <main>:

double dutyCycle = 0;

int main(void)
{
	DDRD = (1 << PORTD6) | (1 << PORTD5);
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << PORTB3);
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	84 b9       	out	0x04, r24	; 4
    
    TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) ;
  bc:	81 ea       	ldi	r24, 0xA1	; 161
  be:	84 bd       	out	0x24, r24	; 36
	TCCR2A = (1 << COM2A1) | (1 << WGM20);
  c0:	81 e8       	ldi	r24, 0x81	; 129
  c2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    TIMSK0 = (1 << TOIE0);
  c6:	c1 e0       	ldi	r28, 0x01	; 1
  c8:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    
    setupADC();
  cc:	0e 94 4e 00 	call	0x9c	; 0x9c <setupADC>
    
    sei();
  d0:	78 94       	sei
    
    TCCR0B = (1 << CS00) ;
  d2:	c5 bd       	out	0x25, r28	; 37
	TCCR2B = (1 << CS20) ;
  d4:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
							OCR0B = 0;
							OCR2A = 0;
						}
						else //purple
						{
							OCR0A = 205;
  d8:	0f 2e       	mov	r0, r31
  da:	fd ec       	ldi	r31, 0xCD	; 205
  dc:	9f 2e       	mov	r9, r31
  de:	f0 2d       	mov	r31, r0
							OCR0B = 0;
							OCR2A = 255;
  e0:	c3 eb       	ldi	r28, 0xB3	; 179
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	1f ef       	ldi	r17, 0xFF	; 255
							OCR0B = 247;
							OCR2A = 0;
						}
						else if (dutyCycle < 150) //orange
						{
							OCR0A = 230;
  e6:	0f 2e       	mov	r0, r31
  e8:	f6 ee       	ldi	r31, 0xE6	; 230
  ea:	af 2e       	mov	r10, r31
  ec:	f0 2d       	mov	r31, r0
							OCR0B = 255;
							OCR2A = 0;
						}
						else if (dutyCycle < 100 ) //yellow
						{
							OCR0A = 180;
  ee:	0f 2e       	mov	r0, r31
  f0:	f4 eb       	ldi	r31, 0xB4	; 180
  f2:	bf 2e       	mov	r11, r31
  f4:	f0 2d       	mov	r31, r0
							OCR0B = 247;
  f6:	07 ef       	ldi	r16, 0xF7	; 247
	TCCR2B = (1 << CS20) ;
    
    while(1)
    {
    	//TODO:: Please write your application code
						if (dutyCycle < 50 ) //green
  f8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <_edata>
  fc:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <_edata+0x1>
 100:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_edata+0x2>
 104:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_edata+0x3>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	48 e4       	ldi	r20, 0x48	; 72
 10e:	52 e4       	ldi	r21, 0x42	; 66
 110:	c7 01       	movw	r24, r14
 112:	b6 01       	movw	r22, r12
 114:	0e 94 02 01 	call	0x204	; 0x204 <__cmpsf2>
 118:	88 23       	and	r24, r24
 11a:	24 f4       	brge	.+8      	; 0x124 <main+0x70>
						{
							OCR0A = 0;
 11c:	17 bc       	out	0x27, r1	; 39
							OCR0B = 255;
 11e:	18 bd       	out	0x28, r17	; 40
							OCR2A = 0;
 120:	18 82       	st	Y, r1
 122:	ea cf       	rjmp	.-44     	; 0xf8 <main+0x44>
						}
						else if (dutyCycle < 100 ) //yellow
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	48 ec       	ldi	r20, 0xC8	; 200
 12a:	52 e4       	ldi	r21, 0x42	; 66
 12c:	c7 01       	movw	r24, r14
 12e:	b6 01       	movw	r22, r12
 130:	0e 94 02 01 	call	0x204	; 0x204 <__cmpsf2>
 134:	88 23       	and	r24, r24
 136:	24 f4       	brge	.+8      	; 0x140 <main+0x8c>
						{
							OCR0A = 180;
 138:	b7 bc       	out	0x27, r11	; 39
							OCR0B = 247;
 13a:	08 bd       	out	0x28, r16	; 40
							OCR2A = 0;
 13c:	18 82       	st	Y, r1
 13e:	dc cf       	rjmp	.-72     	; 0xf8 <main+0x44>
						}
						else if (dutyCycle < 150) //orange
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	46 e1       	ldi	r20, 0x16	; 22
 146:	53 e4       	ldi	r21, 0x43	; 67
 148:	c7 01       	movw	r24, r14
 14a:	b6 01       	movw	r22, r12
 14c:	0e 94 02 01 	call	0x204	; 0x204 <__cmpsf2>
 150:	88 23       	and	r24, r24
 152:	24 f4       	brge	.+8      	; 0x15c <main+0xa8>
						{
							OCR0A = 230;
 154:	a7 bc       	out	0x27, r10	; 39
							OCR0B = 255;
 156:	18 bd       	out	0x28, r17	; 40
							OCR2A = 0;
 158:	18 82       	st	Y, r1
 15a:	ce cf       	rjmp	.-100    	; 0xf8 <main+0x44>
						}
						else if (dutyCycle < 200 ) //red
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	48 e4       	ldi	r20, 0x48	; 72
 162:	53 e4       	ldi	r21, 0x43	; 67
 164:	c7 01       	movw	r24, r14
 166:	b6 01       	movw	r22, r12
 168:	0e 94 02 01 	call	0x204	; 0x204 <__cmpsf2>
 16c:	88 23       	and	r24, r24
 16e:	24 f4       	brge	.+8      	; 0x178 <main+0xc4>
						{
							OCR0A = 255;
 170:	17 bd       	out	0x27, r17	; 39
							OCR0B = 0;
 172:	18 bc       	out	0x28, r1	; 40
							OCR2A = 0;
 174:	18 82       	st	Y, r1
 176:	c0 cf       	rjmp	.-128    	; 0xf8 <main+0x44>
						}
						else //purple
						{
							OCR0A = 205;
 178:	97 bc       	out	0x27, r9	; 39
							OCR0B = 0;
 17a:	18 bc       	out	0x28, r1	; 40
							OCR2A = 255;
 17c:	18 83       	st	Y, r17
 17e:	bc cf       	rjmp	.-136    	; 0xf8 <main+0x44>

00000180 <__vector_16>:
{
    ADCSRA |= (1 << ADSC);
}

ISR(TIMER0_OVF_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1


}
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_21>:

ISR(ADC_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	dutyCycle = ADC/4;
 1b6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1ba:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1be:	76 95       	lsr	r23
 1c0:	67 95       	ror	r22
 1c2:	76 95       	lsr	r23
 1c4:	67 95       	ror	r22
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 07 01 	call	0x20e	; 0x20e <__floatunsisf>
 1ce:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1d2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 1d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 1da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	startConversion();
 1de:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__cmpsf2>:
 204:	0e 94 44 01 	call	0x288	; 0x288 <__fp_cmp>
 208:	08 f4       	brcc	.+2      	; 0x20c <__cmpsf2+0x8>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret

0000020e <__floatunsisf>:
 20e:	e8 94       	clt
 210:	09 c0       	rjmp	.+18     	; 0x224 <__floatsisf+0x12>

00000212 <__floatsisf>:
 212:	97 fb       	bst	r25, 7
 214:	3e f4       	brtc	.+14     	; 0x224 <__floatsisf+0x12>
 216:	90 95       	com	r25
 218:	80 95       	com	r24
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	8f 4f       	sbci	r24, 0xFF	; 255
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	99 23       	and	r25, r25
 226:	a9 f0       	breq	.+42     	; 0x252 <__floatsisf+0x40>
 228:	f9 2f       	mov	r31, r25
 22a:	96 e9       	ldi	r25, 0x96	; 150
 22c:	bb 27       	eor	r27, r27
 22e:	93 95       	inc	r25
 230:	f6 95       	lsr	r31
 232:	87 95       	ror	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b7 95       	ror	r27
 23a:	f1 11       	cpse	r31, r1
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <__floatsisf+0x1c>
 23e:	fa f4       	brpl	.+62     	; 0x27e <__floatsisf+0x6c>
 240:	bb 0f       	add	r27, r27
 242:	11 f4       	brne	.+4      	; 0x248 <__floatsisf+0x36>
 244:	60 ff       	sbrs	r22, 0
 246:	1b c0       	rjmp	.+54     	; 0x27e <__floatsisf+0x6c>
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	8f 4f       	sbci	r24, 0xFF	; 255
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	16 c0       	rjmp	.+44     	; 0x27e <__floatsisf+0x6c>
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <__floatsisf+0x48>
 256:	96 e9       	ldi	r25, 0x96	; 150
 258:	11 c0       	rjmp	.+34     	; 0x27c <__floatsisf+0x6a>
 25a:	77 23       	and	r23, r23
 25c:	21 f0       	breq	.+8      	; 0x266 <__floatsisf+0x54>
 25e:	9e e8       	ldi	r25, 0x8E	; 142
 260:	87 2f       	mov	r24, r23
 262:	76 2f       	mov	r23, r22
 264:	05 c0       	rjmp	.+10     	; 0x270 <__floatsisf+0x5e>
 266:	66 23       	and	r22, r22
 268:	71 f0       	breq	.+28     	; 0x286 <__floatsisf+0x74>
 26a:	96 e8       	ldi	r25, 0x86	; 134
 26c:	86 2f       	mov	r24, r22
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	2a f0       	brmi	.+10     	; 0x27e <__floatsisf+0x6c>
 274:	9a 95       	dec	r25
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	da f7       	brpl	.-10     	; 0x274 <__floatsisf+0x62>
 27e:	88 0f       	add	r24, r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	97 f9       	bld	r25, 7
 286:	08 95       	ret

00000288 <__fp_cmp>:
 288:	99 0f       	add	r25, r25
 28a:	00 08       	sbc	r0, r0
 28c:	55 0f       	add	r21, r21
 28e:	aa 0b       	sbc	r26, r26
 290:	e0 e8       	ldi	r30, 0x80	; 128
 292:	fe ef       	ldi	r31, 0xFE	; 254
 294:	16 16       	cp	r1, r22
 296:	17 06       	cpc	r1, r23
 298:	e8 07       	cpc	r30, r24
 29a:	f9 07       	cpc	r31, r25
 29c:	c0 f0       	brcs	.+48     	; 0x2ce <__fp_cmp+0x46>
 29e:	12 16       	cp	r1, r18
 2a0:	13 06       	cpc	r1, r19
 2a2:	e4 07       	cpc	r30, r20
 2a4:	f5 07       	cpc	r31, r21
 2a6:	98 f0       	brcs	.+38     	; 0x2ce <__fp_cmp+0x46>
 2a8:	62 1b       	sub	r22, r18
 2aa:	73 0b       	sbc	r23, r19
 2ac:	84 0b       	sbc	r24, r20
 2ae:	95 0b       	sbc	r25, r21
 2b0:	39 f4       	brne	.+14     	; 0x2c0 <__fp_cmp+0x38>
 2b2:	0a 26       	eor	r0, r26
 2b4:	61 f0       	breq	.+24     	; 0x2ce <__fp_cmp+0x46>
 2b6:	23 2b       	or	r18, r19
 2b8:	24 2b       	or	r18, r20
 2ba:	25 2b       	or	r18, r21
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <__fp_cmp+0x3e>
 2be:	08 95       	ret
 2c0:	0a 26       	eor	r0, r26
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <__fp_cmp+0x3e>
 2c4:	a1 40       	sbci	r26, 0x01	; 1
 2c6:	a6 95       	lsr	r26
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	81 1d       	adc	r24, r1
 2cc:	81 1d       	adc	r24, r1
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
