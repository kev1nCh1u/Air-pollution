
main_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000695  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

double dutyCycle = 0;

int main(void)
{
	DDRD = (1 << PORTD6) | (1 << PORTD5);
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << PORTB3);
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
  98:	17 b8       	out	0x07, r1	; 7
	PORTC |= 0x07;
  9a:	88 b1       	in	r24, 0x08	; 8
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	88 b9       	out	0x08, r24	; 8
	
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) ;
  a0:	81 ea       	ldi	r24, 0xA1	; 161
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR2A = (1 << COM2A1) | (1 << WGM20);
  a4:	81 e8       	ldi	r24, 0x81	; 129
  a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TIMSK0 = (1 << TOIE0);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	//TIMSK2 = (1 << TOIE2);
	
	sei();
  b0:	78 94       	sei
	
	TCCR0B = (1 << CS00) | (1 << CS02);
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
	TCCR2B = (1 << CS20) | (1 << CS22);
  b6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
			OCR0B = 0;
			OCR2A = 0;
		}
		else //purple
		{
			OCR0A = 205;
  ba:	2d ec       	ldi	r18, 0xCD	; 205
			OCR0B = 0;
			OCR2A = 255;
  bc:	e3 eb       	ldi	r30, 0xB3	; 179
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	9f ef       	ldi	r25, 0xFF	; 255
			OCR0B = 247;
			OCR2A = 0;
		}
		else if ((PINC & 0x07)==0x02)//orange
		{
			OCR0A = 230;
  c2:	56 ee       	ldi	r21, 0xE6	; 230
			OCR0B = 255;
			OCR2A = 0;
		}
		else if ((PINC & 0x07)==0x01)//yellow
		{
			OCR0A = 180;
  c4:	44 eb       	ldi	r20, 0xB4	; 180
			OCR0B = 247;
  c6:	37 ef       	ldi	r19, 0xF7	; 247
	TCCR0B = (1 << CS00) | (1 << CS02);
	TCCR2B = (1 << CS20) | (1 << CS22);
	
	while(1)
	{
		if ((PINC & 0x07)==0x00) //green
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	21 f4       	brne	.+8      	; 0xd6 <main+0x46>
		{
			OCR0A = 0;
  ce:	17 bc       	out	0x27, r1	; 39
			OCR0B = 255;
  d0:	98 bd       	out	0x28, r25	; 40
			OCR2A = 0;
  d2:	10 82       	st	Z, r1
  d4:	f9 cf       	rjmp	.-14     	; 0xc8 <main+0x38>
		}
		else if ((PINC & 0x07)==0x01)//yellow
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	87 70       	andi	r24, 0x07	; 7
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	21 f4       	brne	.+8      	; 0xe6 <main+0x56>
		{
			OCR0A = 180;
  de:	47 bd       	out	0x27, r20	; 39
			OCR0B = 247;
  e0:	38 bd       	out	0x28, r19	; 40
			OCR2A = 0;
  e2:	10 82       	st	Z, r1
  e4:	f1 cf       	rjmp	.-30     	; 0xc8 <main+0x38>
		}
		else if ((PINC & 0x07)==0x02)//orange
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	87 70       	andi	r24, 0x07	; 7
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	21 f4       	brne	.+8      	; 0xf6 <main+0x66>
		{
			OCR0A = 230;
  ee:	57 bd       	out	0x27, r21	; 39
			OCR0B = 255;
  f0:	98 bd       	out	0x28, r25	; 40
			OCR2A = 0;
  f2:	10 82       	st	Z, r1
  f4:	e9 cf       	rjmp	.-46     	; 0xc8 <main+0x38>
		}
		else if ((PINC & 0x07)==0x03) //red
  f6:	86 b1       	in	r24, 0x06	; 6
  f8:	87 70       	andi	r24, 0x07	; 7
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	21 f4       	brne	.+8      	; 0x106 <main+0x76>
		{
			OCR0A = 255;
  fe:	97 bd       	out	0x27, r25	; 39
			OCR0B = 0;
 100:	18 bc       	out	0x28, r1	; 40
			OCR2A = 0;
 102:	10 82       	st	Z, r1
 104:	e1 cf       	rjmp	.-62     	; 0xc8 <main+0x38>
		}
		else //purple
		{
			OCR0A = 205;
 106:	27 bd       	out	0x27, r18	; 39
			OCR0B = 0;
 108:	18 bc       	out	0x28, r1	; 40
			OCR2A = 255;
 10a:	90 83       	st	Z, r25
 10c:	dd cf       	rjmp	.-70     	; 0xc8 <main+0x38>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
